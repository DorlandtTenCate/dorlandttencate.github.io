{"version":3,"sources":["flow-model.js","input.js","sidebar.js","App.js","serviceWorker.js","index.js"],"names":["FlowModel","flowArea","wettedPerimeter","state","leftWinterHeight","lwh","leftWinterDistance","lwd","leftSummerHeight","lsh","leftSummerDistance","lsd","rightSummerHeight","rsh","rightSummerDistance","rsd","rightWinterHeight","rwh","rightWinterDistance","rwd","summerBedDepth","sbd","summerBedWidth","sbw","flowRate","q","manningCoefficient","n","slope","s","maxDykeHeight","Math","max","scale","width","height","factor","_s","m","_b","_t","_l","Q","a","p","pow","sqrt","side","summerDistance","winterDistance","oppositeSummerDistance","sort","b","shortSummerDyke","tallSummerDyke","flowAreas","summerBedArea","summerBedPerimeter","push","type","maxRate","summerPlainsHeight","min","summerPlainsWidth","summerPlainsArea","summerPlainsPerimeter","winterPlainsWidth","lowerWinterPlainsArea","lowerWinterPlainsPerimeter","winterPlainWidth","lowerWinterPlainArea","lowerWinterPlainPerimeter","lowerWinterPlainsHeight","halfWinterPlainsArea","halfWinterPlainsPermeter","winterPlainsArea","winterPlainsPerimeter","winterPlainsHeight","QLowerWinterPlain","waterLevel","waterLevels","summerBed","summerPlains","leftWinterPlain","rightWinterPlain","middleWinterPlain","upperWinterPlains","currentlyFillingFlowArea","find","f","solve","d","overflowArea","leftWinterPlainWidth","rightWinterPlainWidth","leftArea","rightArea","maxLeftWinterPlainArea","maxRightWinterPlainArea","leftWinterPlainArea","rightWinterPlainArea","totalWidth","middleWinterPlainWidth","secondWinterPlainWidth","Sky","colorClass","className","Ground","y","Dyke","distance","cx","cy","rx","ry","SummerPlains","x","LeftWinterPlain","RightWinterPlain","SummerBed","id","mask","window","toFixed","viewBox","x1","y1","x2","y2","Input","label","value","step","val","setVal","onChange","e","parseFloat","target","Sidebar","App","useState","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ffdda81a.chunk.js","sourcesContent":["import React from 'react';\nimport { solve } from 'solv.js';\n\nexport default function FlowModel({ state }) {\n  const {\n    lwh: [leftWinterHeight],\n    lwd: [leftWinterDistance],\n    lsh: [leftSummerHeight],\n    lsd: [leftSummerDistance],\n    rsh: [rightSummerHeight],\n    rsd: [rightSummerDistance],\n    rwh: [rightWinterHeight],\n    rwd: [rightWinterDistance],\n    sbd: [summerBedDepth],\n    sbw: [summerBedWidth],\n    q: [flowRate],\n    n: [manningCoefficient],\n    s: [slope],\n  } = state;\n\n  let flowArea, wettedPerimeter;\n\n  // ***********\n  // * Scaling *\n  // ***********\n  // Height of highest dyke\n  const maxDykeHeight = Math.max(leftWinterHeight, leftSummerHeight, rightSummerHeight, rightWinterHeight);\n\n  const scale = {\n    width: leftWinterHeight + leftWinterDistance + 0.5 + summerBedWidth + 0.5 + rightWinterDistance + rightWinterHeight,\n    height: maxDykeHeight + summerBedDepth + 1,\n  };\n\n  // Maintain 2:1 aspect ratio\n  if (scale.width < scale.height * 2) scale.width = scale.height * 2;\n  if (scale.height < scale.width / 2) scale.height = scale.width / 2;\n\n  // Allocate up to 90% of image size\n  scale.factor = 450 / scale.height;\n\n  const _s = (m) => m * scale.factor;\n\n  // Convert metric top to SVG top\n  const _t = (m) => 25 + _s(m);\n\n  // Convert metric bottom to SVG top\n  const _b = (m) => _t(scale.height - m);\n\n  // Convert metric left to SVG left\n  const _l = (m) => 50 + _s(m);\n\n  // Convert metric right to SVG left\n  const _r = (m) => _l(scale.width - m);\n\n  /**\n   * Calculate using Manning's formula. Assumes n and s to be set in scope\n   *\n   * @param {*} a Area of the water flow (in m^2)\n   * @param {*} p Wetted perimeter (in m)\n   * @returns Flow rate in m/s\n   */\n  function Q(a, p) {\n    flowArea = a;\n    wettedPerimeter = p;\n    if (a < 0 || p < 0) return -1;\n\n    return (1 / manningCoefficient) * a * Math.pow(a / p, 2 / 3) * Math.sqrt(slope);\n  }\n\n  const [shortSummerDyke, tallSummerDyke] = [\n    {\n      side: 'left',\n      height: leftSummerHeight,\n      summerDistance: leftSummerDistance,\n      winterDistance: leftWinterDistance,\n      oppositeSummerDistance: rightSummerDistance,\n    },\n    {\n      side: 'right',\n      height: rightSummerHeight,\n      summerDistance: rightSummerDistance,\n      winterDistance: leftWinterDistance,\n      oppositeSummerDistance: leftSummerDistance,\n    },\n  ].sort((a, b) => a.height - b.height);\n\n  const flowAreas = [];\n\n  // Calculate A and P for a full summer bed\n  // Summer bed is rectangular, os A = w * h and P = w + 2h (no 2w, because it's open on the top)\n  // sb = summer bed\n  const summerBedArea = summerBedWidth * summerBedDepth;\n  const summerBedVericalPerimeter = 2 * summerBedDepth;\n  const summerBedPerimeter = summerBedWidth + summerBedVericalPerimeter;\n  flowAreas.push({ type: 'summerBed', maxRate: Q(summerBedArea, summerBedPerimeter) });\n\n  // Calculate max. A and P to stay within summer dykes\n  // Same idea: A = summer bed + square between both summer dykes, height of the lowest one.\n  // sp = summer plain\n  const summerPlainsHeight = Math.min(leftSummerHeight, rightSummerHeight); // Summer Plain Height (i.e. height of lowest summer dyke)\n  const summerPlainsWidth = leftSummerDistance + summerBedWidth + rightSummerDistance;\n  const summerPlainsArea = summerBedArea + summerPlainsWidth * summerPlainsHeight;\n  const summerPlainsVerticalPerimeter = 2 * summerBedDepth + 2 * summerPlainsHeight;\n  const summerPlainsPerimeter = summerPlainsVerticalPerimeter + summerPlainsWidth;\n  flowAreas.push({ type: 'summerPlains', maxRate: Q(summerPlainsArea, summerPlainsPerimeter) });\n\n  const winterPlainsWidth = leftWinterDistance + summerBedWidth + rightWinterDistance;\n\n  if (leftSummerHeight === rightSummerHeight) {\n    // Calculate max A and P for outside of winter dykes. Since their heights are equal, they'll start flowing over at the same moment.\n    // lwp = lower winter plain\n    const lowerWinterPlainsArea = summerBedArea + winterPlainsWidth * summerPlainsHeight;\n    const lowerWinterPlainsVerticalPerimeter = 2 * summerBedDepth + 6 * summerPlainsHeight; // 6 = 4 (twice on both summer dykes) + 2 (inside of both winter dykes)\n    const lowerWinterPlainsPerimeter = lowerWinterPlainsVerticalPerimeter + winterPlainsWidth;\n    flowAreas.push({ type: 'lowerWinterPlains', maxRate: Q(lowerWinterPlainsArea, lowerWinterPlainsPerimeter) });\n  } else {\n    // Calculate max A and P for outside of lowest summer dyke\n    const winterPlainWidth = summerBedWidth + shortSummerDyke.winterDistance + shortSummerDyke.oppositeSummerDistance;\n    const lowerWinterPlainArea = summerBedArea + winterPlainWidth * summerPlainsHeight;\n    const lowerWinterPlainVerticalPerimeter = 2 * summerBedDepth + 4 * summerPlainsHeight;\n    const lowerWinterPlainPerimeter = lowerWinterPlainVerticalPerimeter + winterPlainWidth;\n    flowAreas.push({\n      type: 'lowerWinterPlain',\n      maxRate: Q(lowerWinterPlainArea, lowerWinterPlainPerimeter),\n    });\n\n    // Calculate max A and P for inside of tall summer dyke (i.e. part above lower summer dyke)\n    const lowerWinterPlainsHeight = tallSummerDyke.height;\n    const halfWinterPlainsArea = summerBedArea + winterPlainWidth * lowerWinterPlainsHeight;\n    const halfWinterPlainsVerticalPerimeter =\n      2 * summerBedDepth + 2 * shortSummerDyke.height + 2 * lowerWinterPlainsHeight;\n    const halfWinterPlainsPermeter = halfWinterPlainsVerticalPerimeter + winterPlainWidth;\n    flowAreas.push({ type: 'middleWinterPlain', maxRate: Q(halfWinterPlainsArea, halfWinterPlainsPermeter) });\n\n    // Calculate max A and P for outside of tall summer dyke\n    const winterPlainsWidth = leftWinterDistance + summerBedWidth + rightWinterDistance;\n    const winterPlainsArea = summerBedArea + lowerWinterPlainsHeight * winterPlainsWidth;\n    const winterPlainsVerticalPerimeter =\n      2 * summerBedDepth + 2 * leftSummerHeight + 2 * rightSummerHeight + 2 * lowerWinterPlainsHeight;\n    const winterPlainsPerimeter = winterPlainsVerticalPerimeter + winterPlainsWidth;\n    flowAreas.push({ type: 'secondWinterPlain', maxRate: Q(winterPlainsArea, winterPlainsPerimeter) });\n  }\n\n  // Calculate max A and P to stay within winter dykes\n  const winterPlainsHeight = Math.min(leftWinterHeight, rightWinterHeight);\n  const winterPlainsArea = summerBedArea + winterPlainsWidth * winterPlainsHeight;\n  const winterPlainsVerticalPerimeter = 2 * summerBedDepth + 4 * summerPlainsHeight + 2 * winterPlainsHeight;\n  const winterPlainsPerimeter = winterPlainsVerticalPerimeter + winterPlainsWidth;\n  flowAreas.push({ type: 'upperWinterPlains', maxRate: Q(winterPlainsArea, winterPlainsPerimeter) });\n\n  // Calculates Flow Rate Q for depth d inside summerbed\n  function QSummerBed(d) {\n    const a = summerBedWidth * d;\n\n    // Wet perimeter W\n    const p = summerBedWidth + 2 * d;\n\n    return Q(a, p);\n  }\n\n  function QSummerPlains(waterLevel) {\n    // Don't bother with the plains if the water fits in the summer bed\n    // if (q <= QSummerBed(sbd)) return QSummerBed(d);\n    if (waterLevel <= summerBedDepth) return QSummerBed(waterLevel);\n\n    waterLevel -= summerBedDepth;\n\n    const p = summerPlainsWidth + 2 * waterLevel + 2 * summerBedDepth;\n    const a = summerBedWidth * summerBedDepth + summerPlainsWidth * waterLevel;\n\n    return Q(a, p);\n  }\n\n  function QLowerWinterPlains(a) {\n    // The tricky part here is to calculate P. We need the water height of either side based on equal distribution of A.\n    const leftWinterPlainWidth = leftWinterDistance - leftSummerDistance;\n    const rightWinterPlainWidth = rightWinterDistance - rightSummerDistance;\n    const w = leftWinterPlainWidth + rightWinterPlainWidth;\n\n    const overflowArea = a - summerPlainsArea;\n    if (overflowArea < 0) return overflowArea;\n\n    // Is either part full?\n    let leftArea = 0.5 * overflowArea;\n    let rightArea = 0.5 * overflowArea;\n\n    if (leftArea > leftWinterPlainWidth * leftWinterHeight) {\n      rightArea += leftArea - leftWinterPlainWidth * summerPlainsHeight;\n      leftArea = leftWinterPlainWidth * summerPlainsHeight;\n    } else if (rightArea > rightWinterPlainWidth * summerPlainsHeight) {\n      leftArea += rightArea - rightWinterPlainWidth * summerPlainsHeight;\n      rightArea = rightWinterPlainWidth * summerPlainsHeight;\n    }\n\n    const leftHeight = leftArea / leftWinterPlainWidth;\n    const rightHeight = rightArea / rightWinterPlainWidth;\n\n    // We count the full outer side of the summer dykes within the perimeter, even though they're not fully immersed\n    const vp = leftHeight + 2 * leftSummerHeight + 2 * summerBedDepth + 2 * rightSummerHeight + rightHeight;\n    const p = vp + winterPlainsWidth;\n    return Q(a, p);\n  }\n\n  function QLowerWinterPlain(waterLevel) {\n    const width = summerBedWidth + shortSummerDyke.winterDistance + shortSummerDyke.oppositeSummerDistance;\n    const winterPlainWidth = shortSummerDyke.winterDistance - shortSummerDyke.summerDistance;\n    const area = summerPlainsArea + winterPlainWidth * waterLevel;\n    const verticalPerimeter = 2 * summerBedDepth + 2 * summerPlainsHeight + 2 * waterLevel;\n    const perimeter = verticalPerimeter + width;\n\n    return Q(area, perimeter);\n  }\n\n  function QMiddleWinterPlain(waterLevel) {\n    const width = summerBedWidth + shortSummerDyke.winterDistance + shortSummerDyke.oppositeSummerDistance;\n    const area = summerBedArea + width * waterLevel;\n    const verticalPerimeter = 2 * summerBedDepth + 2 * summerPlainsHeight + 2 * waterLevel;\n    const perimeter = verticalPerimeter + width;\n\n    return Q(area, perimeter);\n  }\n\n  function QSecondWinterPlain(waterLevel) {\n    const totalWidth = summerBedWidth + leftWinterDistance + rightWinterDistance;\n    const middleWinterPlainWidth =\n      summerBedWidth + shortSummerDyke.winterDistance + shortSummerDyke.oppositeSummerDistance;\n    const secondWinterPlainWidth = tallSummerDyke.winterDistance - tallSummerDyke.summerDistance;\n\n    const area = summerBedArea + middleWinterPlainWidth * tallSummerDyke.height + secondWinterPlainWidth * waterLevel;\n\n    const verticalPerimeter =\n      2 * summerBedDepth + 2 * shortSummerDyke.height + 2 * tallSummerDyke.height + 2 * waterLevel;\n    const perimeter = verticalPerimeter + totalWidth;\n\n    return Q(area, perimeter);\n  }\n\n  function QUpperWinterPlains(waterLevel) {\n    if (waterLevel <= 0) return waterLevel;\n    const width = summerBedWidth + leftWinterDistance + rightWinterDistance;\n    const area = summerBedArea + width * waterLevel;\n\n    const verticalPerimeter = 2 * summerBedDepth + 2 * leftSummerHeight + 2 * rightSummerHeight + 2 * waterLevel;\n    const perimeter = verticalPerimeter + width;\n\n    return Q(area, perimeter);\n  }\n\n  const waterLevels = {\n    summerBed: 0,\n    summerPlains: 0,\n    leftWinterPlain: 0,\n    rightWinterPlain: 0,\n    middleWinterPlain: 0,\n    upperWinterPlains: 0,\n  };\n\n  // Determine which FlowRate area applies to the configured flow rate\n  const currentlyFillingFlowArea = flowAreas.find((f) => f.maxRate > flowRate);\n\n  if (currentlyFillingFlowArea) {\n    if (currentlyFillingFlowArea.type === 'summerBed' || currentlyFillingFlowArea.type === 'summerPlains') {\n      const waterLevel = solve(QSummerPlains, flowRate);\n      waterLevels.summerBed = Math.min(waterLevel, summerBedDepth);\n      waterLevels.summerPlains = Math.max(waterLevel - summerBedDepth, 0);\n    } else {\n      waterLevels.summerBed = summerBedDepth;\n      waterLevels.summerPlains = summerPlainsHeight;\n      if (currentlyFillingFlowArea.type === 'lowerWinterPlains') {\n        // Equal dykes\n        const overflowArea = solve(QLowerWinterPlains, flowRate) - summerPlainsArea;\n        const leftWinterPlainWidth = leftWinterDistance - leftSummerDistance;\n        const rightWinterPlainWidth = rightWinterDistance - rightSummerDistance;\n        const maxLeftWinterPlainArea = leftWinterPlainWidth * summerPlainsHeight;\n        const maxRightWinterPlainArea = rightWinterPlainWidth * summerPlainsHeight;\n        let leftWinterPlainArea = overflowArea / 2;\n        let rightWinterPlainArea = overflowArea / 2;\n        if (leftWinterPlainArea > maxLeftWinterPlainArea) {\n          rightWinterPlainArea += leftWinterPlainArea - maxLeftWinterPlainArea;\n          leftWinterPlainArea = maxLeftWinterPlainArea;\n        }\n        if (rightWinterPlainArea > maxRightWinterPlainArea) {\n          leftWinterPlainArea += rightWinterPlainArea - maxLeftWinterPlainArea;\n          leftWinterPlainArea = maxRightWinterPlainArea;\n        }\n\n        waterLevels.leftWinterPlain = leftWinterPlainArea / leftWinterPlainWidth;\n        waterLevels.rightWinterPlain = rightWinterPlainArea / rightWinterPlainWidth;\n      } else if (currentlyFillingFlowArea.type === 'lowerWinterPlain') {\n        waterLevels[`${shortSummerDyke.side}WinterPlain`] = solve(QLowerWinterPlain, flowRate);\n      } else if (currentlyFillingFlowArea.type === 'middleWinterPlain') {\n        const waterLevel = solve(QMiddleWinterPlain, flowRate);\n        waterLevels[`${shortSummerDyke.side}WinterPlain`] = waterLevels.summerPlains = waterLevel;\n      } else if (currentlyFillingFlowArea.type === 'secondWinterPlain') {\n        waterLevels[`${shortSummerDyke.side}WinterPlain`] = waterLevels.summerPlains = tallSummerDyke.height;\n        waterLevels[`${tallSummerDyke.side}WinterPlain`] = solve(QSecondWinterPlain, flowRate);\n      } else if (currentlyFillingFlowArea.type === 'upperWinterPlains') {\n        const waterLevel = solve(QUpperWinterPlains, flowRate);\n        waterLevels.leftWinterPlain = waterLevels.middleWinterPlain = waterLevels.rightWinterPlain = waterLevels.summerPlains = waterLevel;\n      }\n    }\n  }\n\n  function Sky() {\n    const colorClass = currentlyFillingFlowArea ? 'text-blue-300' : 'text-red-300';\n    return <rect className={`${colorClass} fill-current w-full h-full`} />;\n  }\n  function Ground() {\n    return <rect className=\"text-yellow-900 fill-current h-full w-full\" y={_b(summerBedDepth)} />;\n  }\n  function Dyke({ side, distance, height }) {\n    return (\n      <ellipse\n        className=\"text-yellow-800 fill-current\"\n        cx={\n          side === 'left'\n            ? _l(leftWinterHeight + leftWinterDistance - distance - height / 2)\n            : _l(leftWinterHeight + leftWinterDistance + 0.5 + summerBedWidth + 0.5 + distance + height / 2)\n        }\n        // cx={side === 'left' ? l(lwd - distance) : l(lwd + distance + w)}\n        cy={_b(summerBedDepth) + _s(height)}\n        rx={_s(height / 2)}\n        ry={_s(height * 2)}\n      />\n    );\n  }\n\n  function SummerPlains() {\n    return (\n      <rect\n        className=\"text-blue-800 fill-current h-full\"\n        width={_s(summerPlainsWidth + 1 + leftSummerHeight / 2 + rightSummerHeight / 2)} // FIXME: Is this correct, or should it be .5lsh + .5rsh?\n        x={_l(leftWinterHeight + leftWinterDistance - leftSummerDistance - leftSummerHeight / 2)}\n        y={_b(summerBedDepth + waterLevels.summerPlains)}\n      />\n    );\n  }\n\n  function LeftWinterPlain() {\n    return (\n      <rect\n        className=\"text-blue-800 fill-current h-full\"\n        width={_s(leftWinterHeight / 2 + leftWinterDistance - leftSummerDistance - leftSummerHeight / 2)}\n        x={_l(leftWinterHeight / 2)}\n        y={_b(waterLevels.leftWinterPlain + summerBedDepth)}\n      />\n    );\n  }\n\n  function RightWinterPlain() {\n    return (\n      <rect\n        className=\"text-blue-800 fill-current h-full\"\n        width={_s(rightWinterDistance - rightSummerDistance - rightSummerHeight / 2 + rightWinterHeight / 2)}\n        x={_l(\n          leftWinterHeight +\n            leftWinterDistance +\n            0.5 +\n            summerBedWidth +\n            0.5 +\n            rightSummerDistance +\n            rightSummerHeight / 2\n        )}\n        y={_b(waterLevels.rightWinterPlain + summerBedDepth)}\n      />\n    );\n  }\n\n  function SummerBed() {\n    return (\n      <>\n        <mask id=\"flow-area-mask\">\n          <path\n            className=\"text-white h-48 fill-current\"\n            d={`M ${_l(leftWinterHeight + leftWinterDistance)} ${_b(summerBedDepth)}\n        a ${_s(0.5)} ${_s(0.5)} 0 0 1 ${_s(0.5)} ${_s(0.5)}\n        v ${_s(summerBedDepth) - _s(1)}\n        a ${_s(0.5)} ${_s(0.5)} 0 0 0 ${_s(0.5)} ${_s(0.5)}\n        h ${_s(summerBedWidth) - _s(1)}\n        a ${_s(0.5)} ${_s(0.5)} 0 0 0 ${_s(0.5)} -${_s(0.5)}\n        v ${-_s(summerBedDepth) + _s(1)}\n        a ${_s(0.5)} ${_s(0.5)} 0 0 1 ${_s(0.5)} -${_s(0.5)}\n        z`}\n          />\n        </mask>\n        <rect className=\"text-blue-300 fill-current w-full h-full\" mask=\"url(#flow-area-mask)\" />\n        <rect\n          className=\"text-blue-800 fill-current w-full h-full\"\n          mask=\"url(#flow-area-mask)\"\n          y={_b(waterLevels.summerBed)}\n        />\n      </>\n    );\n  }\n\n  window.q = QLowerWinterPlain;\n\n  return (\n    <div className=\"flow-model\">\n      <p>Water level: {waterLevels.summerPlains.toFixed(2)}m</p>\n      <p>\n        Flow Area: {flowArea.toFixed(2)}m<sup>2</sup>\n      </p>\n      <p>Wetted perimeter: {wettedPerimeter.toFixed(2)}m</p>\n      <svg className=\"w-full\" viewBox=\"0 0 1000 500\">\n        <Sky />\n        <LeftWinterPlain />\n        <SummerPlains />\n        <RightWinterPlain />\n        <Dyke side=\"left\" height={leftWinterHeight} distance={leftWinterDistance} />\n        <Dyke side=\"left\" height={leftSummerHeight} distance={leftSummerDistance} />\n        <Dyke side=\"right\" height={rightSummerHeight} distance={rightSummerDistance} />\n        <Dyke side=\"right\" height={rightWinterHeight} distance={rightWinterDistance} />\n        <Ground />\n        <SummerBed />\n        <line id=\"reference-height\" x1=\"0\" y1=\"950\" x2=\"1000\" y2=\"950\" />\n      </svg>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Input({ label, value, className, type = 'number', step = 0.1 }) {\n  const [val, setVal] = value;\n  const handleChange = (e) => setVal(parseFloat(e.target.value));\n\n  return (\n    <div className={className}>\n      <label className=\"block mt-4 text-xs text-gray-600 whitespace-no-wrap\">{label}</label>\n      <input\n        className=\"bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-md py-2 px-4 text-sm block w-full appearance-none leading-normal\"\n        type={type}\n        value={val}\n        onChange={handleChange}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport Input from './input';\n\nexport default function Sidebar({ state }) {\n  const { q, n, s, sbd, sbw, lwh, lwd, lsh, lsd, rsh, rsd, rwh, rwd } = state;\n  return (\n    <div className=\"sidebar\">\n      <h2 className=\"font-bold text-2xl\">Summer bed</h2>\n      <div className=\"lg:flex\">\n        <Input\n          className=\"w-full\"\n          label={\n            <>\n              Flow rate in m<sup>3</sup>/s\n            </>\n          }\n          value={q}\n        />\n      </div>\n      <div className=\"lg:flex\">\n        <Input className=\"w-full lg:w-1/2 mr-8\" label=\"Roughness coefficient (Manning)\" value={n} />\n        <Input className=\"w-full lg:w-1/2\" label=\"Slope decline (m/m)\" value={s} />\n      </div>\n\n      <div className=\"lg:flex\">\n        <Input className=\"w-full lg:w-1/2 mr-8\" label=\"Width of the summer bed in m\" value={sbw} />\n        <Input className=\"w-full lg:w-1/2\" label=\"Depth of the summer bed in m\" value={sbd} />\n      </div>\n      <hr className=\"mt-4\" />\n      <h2 className=\"font-bold text-2xl\">Dykes</h2>\n      <div className=\"lg:flex\">\n        <Input className=\"w-full lg:w-1/2 mr-8\" label=\"Height of left winter dyke\" value={lwh} />\n        <Input className=\"w-full lg:w-1/2\" label=\"Distance of left winter dyke\" value={lwd} />\n      </div>\n      <div className=\"lg:flex\">\n        <Input className=\"w-full lg:w-1/2 mr-8\" label=\"Height of left summer dyke\" value={lsh} />\n        <Input className=\"w-full lg:w-1/2\" label=\"Distance of left summer dyke\" value={lsd} />\n      </div>\n      <div className=\"lg:flex\">\n        <Input className=\"w-full lg:w-1/2 mr-8\" label=\"Height of right summer dyke\" value={rsh} />\n        <Input className=\"w-full lg:w-1/2\" label=\"Distance of right summer dyke\" value={rsd} />\n      </div>\n      <div className=\"lg:flex\">\n        <Input className=\"w-full lg:w-1/2 mr-8\" label=\"Height of right winter dyke\" value={rwh} />\n        <Input className=\"w-full lg:w-1/2\" label=\"Distance of right winter dyke\" value={rwd} />\n      </div>\n      <hr className=\"mt-4\" />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\n\nimport FlowModel from './flow-model';\nimport Sidebar from './sidebar';\nimport './App.css';\n\nfunction App() {\n  const state = {\n    q: useState(750),\n    n: useState(0.035),\n    s: useState(0.1),\n    sbd: useState(3.5),\n    sbw: useState(10),\n    lwh: useState(4),\n    lwd: useState(15),\n    lsh: useState(2.5),\n    lsd: useState(5),\n    rsh: useState(2.5),\n    rsd: useState(5),\n    rwh: useState(4),\n    rwd: useState(15),\n  };\n\n  return (\n    <>\n      <h1 className=\"font-bold text-5xl\">Superflow v0.9</h1>\n      <div className=\"md:flex border-t border-gray-400\">\n        <div className=\"w-full min-w-40 md:w-2/5 xl:w-1/4 px-4 py-8\">\n          <Sidebar state={state} />\n        </div>\n        <div className=\"w-full md:w-3/5 xl:w-3/4 px-4 py-8\">\n          <FlowModel state={state} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}