{"version":3,"sources":["flow-model.js","input.js","sidebar.js","App.js","serviceWorker.js","index.js"],"names":["FlowModel","flowArea","wettedPerimeter","state","leftWinterHeight","lwh","leftWinterDistance","lwd","leftSummerHeight","lsh","leftSummerDistance","lsd","rightSummerHeight","rsh","rightSummerDistance","rsd","rightWinterHeight","rwh","rightWinterDistance","rwd","summerBedDepth","sbd","summerBedWidth","sbw","flowRate","q","manningCoefficient","n","slope","s","maxDykeHeight","Math","max","scale","width","height","factor","_s","m","_b","_t","_l","Q","a","p","pow","sqrt","flowAreas","summerBedArea","summerBedPerimeter","push","type","maxRate","summerPlainsHeight","min","summerPlainsWidth","summerPlainsArea","summerPlainsPerimeter","winterPlainsWidth","lowerWinterPlainsArea","lowerWinterPlainsPerimeter","summerDykes","side","winterDistance","oppositeSummerDistance","sort","b","halfWinterPlainsWidth","lowerHalfWinterPlainsArea","lowerHalfWinterPlainsPerimeter","lowerWinterPlainsHeight","halfWinterPlainsArea","halfWinterPlainsPermeter","winterPlainsArea","winterPlainsPerimeter","winterPlainsHeight","waterLevels","summerPlains","leftWinterPlain","rightWinterPlain","middleWinterPlain","upperWinterPlains","currentlyFillingFlowArea","find","f","solve","waterLevel","d","overflowArea","leftWinterPlainWidth","rightWinterPlainWidth","leftArea","rightArea","maxLeftWinterPlainArea","maxRightWinterPlainArea","leftWinterPlainArea","rightWinterPlainArea","Sky","className","Ground","y","Dyke","distance","cx","cy","rx","ry","SummerPlains","x","LeftWinterPlain","RightWinterPlain","SummerBed","id","mask","console","log","class","toFixed","viewBox","x1","y1","x2","y2","Input","label","value","step","val","setVal","onChange","e","parseFloat","target","Sidebar","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d6f822f8.chunk.js","sourcesContent":["import React from 'react';\nimport { solve } from 'solv.js';\n\nexport default function FlowModel({ state }) {\n  const {\n    lwh: [leftWinterHeight],\n    lwd: [leftWinterDistance],\n    lsh: [leftSummerHeight],\n    lsd: [leftSummerDistance],\n    rsh: [rightSummerHeight],\n    rsd: [rightSummerDistance],\n    rwh: [rightWinterHeight],\n    rwd: [rightWinterDistance],\n    sbd: [summerBedDepth],\n    sbw: [summerBedWidth],\n    q: [flowRate],\n    n: [manningCoefficient],\n    s: [slope],\n  } = state;\n\n  let flowArea, wettedPerimeter;\n\n  // ***********\n  // * Scaling *\n  // ***********\n  // Height of highest dyke\n  const maxDykeHeight = Math.max(leftWinterHeight, leftSummerHeight, rightSummerHeight, rightWinterHeight);\n\n  const scale = {\n    width: leftWinterHeight + leftWinterDistance + 0.5 + summerBedWidth + 0.5 + rightWinterDistance + rightWinterHeight,\n    height: maxDykeHeight + summerBedDepth + 1,\n  };\n\n  // Maintain 2:1 aspect ratio\n  if (scale.width < scale.height * 2) scale.width = scale.height * 2;\n  if (scale.height < scale.width / 2) scale.height = scale.width / 2;\n\n  // Allocate up to 90% of image size\n  scale.factor = 450 / scale.height;\n\n  const _s = (m) => m * scale.factor;\n\n  // Convert metric top to SVG top\n  const _t = (m) => 25 + _s(m);\n\n  // Convert metric bottom to SVG top\n  const _b = (m) => _t(scale.height - m);\n\n  // Convert metric left to SVG left\n  const _l = (m) => 50 + _s(m);\n\n  // Convert metric right to SVG left\n  const _r = (m) => _l(scale.width - m);\n\n  /**\n   * Calculate using Manning's formula. Assumes n and s to be set in scope\n   *\n   * @param {*} a Area of the water flow (in m^2)\n   * @param {*} p Wetted perimeter (in m)\n   * @returns Flow rate in m/s\n   */\n  function Q(a, p) {\n    flowArea = a;\n    wettedPerimeter = p;\n    if (a < 0 || p < 0) return -1;\n\n    return (1 / manningCoefficient) * a * Math.pow(a / p, 2 / 3) * Math.sqrt(slope);\n  }\n\n  const flowAreas = [];\n\n  // Calculate A and P for a full summer bed\n  // Summer bed is rectangular, os A = w * h and P = w + 2h (no 2w, because it's open on the top)\n  // sb = summer bed\n  const summerBedArea = summerBedWidth * summerBedDepth;\n  const summerBedVericalPerimeter = 2 * summerBedDepth;\n  const summerBedPerimeter = summerBedWidth + summerBedVericalPerimeter;\n  flowAreas.push({ type: 'summerBed', maxRate: Q(summerBedArea, summerBedPerimeter) });\n\n  // Calculate max. A and P to stay within summer dykes\n  // Same idea: A = summer bed + square between both summer dykes, height of the lowest one.\n  // sp = summer plain\n  const summerPlainsHeight = Math.min(leftSummerHeight, rightSummerHeight); // Summer Plain Height (i.e. height of lowest summer dyke)\n  const summerPlainsWidth = leftSummerDistance + summerBedWidth + rightSummerDistance;\n  const summerPlainsArea = summerBedArea + summerPlainsWidth * summerPlainsHeight;\n  const summerPlainsVerticalPerimeter = 2 * summerBedDepth + 2 * summerPlainsHeight;\n  const summerPlainsPerimeter = summerPlainsVerticalPerimeter + summerPlainsWidth;\n  flowAreas.push({ type: 'summerPlains', maxRate: Q(summerPlainsArea, summerPlainsPerimeter) });\n\n  const winterPlainsWidth = leftWinterDistance + summerBedWidth + rightWinterDistance;\n\n  if (leftSummerHeight === rightSummerHeight) {\n    // Calculate max A and P for outside of winter dykes. Since their heights are equal, they'll start flowing over at the same moment.\n    // lwp = lower winter plain\n    const lowerWinterPlainsArea = summerBedArea + winterPlainsWidth * summerPlainsHeight;\n    const lowerWinterPlainsVerticalPerimeter = 2 * summerBedDepth + 6 * summerPlainsHeight; // 6 = 4 (twice on both summer dykes) + 2 (inside of both winter dykes)\n    const lowerWinterPlainsPerimeter = lowerWinterPlainsVerticalPerimeter + winterPlainsWidth;\n    flowAreas.push({ type: 'lowerWinterPlains', maxRate: Q(lowerWinterPlainsArea, lowerWinterPlainsPerimeter) });\n  } else {\n    const summerDykes = [\n      {\n        side: 'left',\n        height: leftSummerHeight,\n        winterDistance: leftWinterDistance,\n        oppositeSummerDistance: rightSummerDistance,\n      },\n      {\n        side: 'right',\n        height: rightSummerHeight,\n        winterDistance: rightWinterDistance,\n        oppositeSummerDistance: leftSummerDistance,\n      },\n    ].sort((a, b) => a.height - b.height);\n\n    // Calculate max A and P for outside of lowest summer dyke\n    // lhwp = lower half winter plain\n    const halfWinterPlainsWidth =\n      summerBedWidth + summerDykes[0].winterDistance + summerDykes[0].oppositeSummerDistance;\n    const lowerHalfWinterPlainsArea = summerBedArea + halfWinterPlainsWidth * summerPlainsHeight;\n    const lowerHalfWinterPlainsVerticalPerimeter = 2 * summerBedDepth + 4 * summerPlainsHeight;\n    const lowerHalfWinterPlainsPerimeter = lowerHalfWinterPlainsVerticalPerimeter + halfWinterPlainsWidth;\n    flowAreas.push({\n      type: 'lowerHalfWinterPlains',\n      maxRate: Q(lowerHalfWinterPlainsArea, lowerHalfWinterPlainsPerimeter),\n    });\n\n    // Calculate max A and P for inside of higher summer dyke (i.e. part above lower summer dyke)\n    // hwp = half winter plain\n    const lowerWinterPlainsHeight = summerDykes[1].height;\n    const halfWinterPlainsArea = summerBedArea + halfWinterPlainsWidth * lowerWinterPlainsHeight;\n    const halfWinterPlainsVerticalPerimeter =\n      2 * summerBedDepth + 2 * summerDykes[0].height + 2 * lowerWinterPlainsHeight;\n    const halfWinterPlainsPermeter = halfWinterPlainsVerticalPerimeter + halfWinterPlainsWidth;\n    flowAreas.push(Q(halfWinterPlainsArea, halfWinterPlainsPermeter));\n\n    // Calculate max A and P for outside of higher summer dyke\n    const winterPlainsWidth = leftWinterDistance + summerBedWidth + rightWinterDistance;\n    const winterPlainsArea = summerBedArea + lowerWinterPlainsHeight * winterPlainsWidth;\n    const winterPlainsVerticalPerimeter =\n      2 * summerBedDepth + 2 * leftSummerHeight + 2 * rightSummerHeight + 2 * lowerWinterPlainsHeight;\n    const winterPlainsPerimeter = winterPlainsVerticalPerimeter + winterPlainsWidth;\n    flowAreas.push({ type: 'lowerWinterPlains', maxRate: Q(winterPlainsArea, winterPlainsPerimeter) });\n  }\n\n  // Calculate max A and P to stay within winter dykes\n  const winterPlainsHeight = Math.min(leftWinterHeight, rightWinterHeight);\n  const winterPlainsArea = summerBedArea + winterPlainsWidth * winterPlainsHeight;\n  const winterPlainsVerticalPerimeter = 2 * summerBedDepth + 4 * summerPlainsHeight + 2 * winterPlainsHeight;\n  const winterPlainsPerimeter = winterPlainsVerticalPerimeter + winterPlainsWidth;\n  flowAreas.push({ type: 'lowerHalfWinterPlains', maxRate: Q(winterPlainsArea, winterPlainsPerimeter) });\n\n  // Calculates Flow Rate Q for depth d inside summerbed\n  function QSummerBed(d) {\n    const a = summerBedWidth * d;\n\n    // Wet perimeter W\n    const p = summerBedWidth + 2 * d;\n\n    return Q(a, p);\n  }\n\n  function QSummerPlains(waterLevel) {\n    // Don't bother with the plains if the water fits in the summer bed\n    // if (q <= QSummerBed(sbd)) return QSummerBed(d);\n    if (waterLevel <= summerBedDepth) return QSummerBed(waterLevel);\n\n    waterLevel -= summerBedDepth;\n\n    const p = summerPlainsWidth + 2 * waterLevel + 2 * summerBedDepth;\n    const a = summerBedWidth * summerBedDepth + summerPlainsWidth * waterLevel;\n\n    return Q(a, p);\n  }\n\n  function QLowerWinterPlains(a) {\n    // The tricky part here is to calculate P. We need the water height of either side based on equal distribution of A.\n    const leftWinterPlainWidth = leftWinterDistance - leftSummerDistance;\n    const rightWinterPlainWidth = rightWinterDistance - rightSummerDistance;\n    const w = leftWinterPlainWidth + rightWinterPlainWidth;\n\n    const overflowArea = a - summerPlainsArea;\n    if (overflowArea < 0) return overflowArea;\n\n    // Is either part full?\n    let leftArea = 0.5 * overflowArea;\n    let rightArea = 0.5 * overflowArea;\n\n    if (leftArea > leftWinterPlainWidth * leftWinterHeight) {\n      rightArea += leftArea - leftWinterPlainWidth * summerPlainsHeight;\n      leftArea = leftWinterPlainWidth * summerPlainsHeight;\n    } else if (rightArea > rightWinterPlainWidth * summerPlainsHeight) {\n      leftArea += rightArea - rightWinterPlainWidth * summerPlainsHeight;\n      rightArea = rightWinterPlainWidth * summerPlainsHeight;\n    }\n\n    const leftHeight = leftArea / leftWinterPlainWidth;\n    const rightHeight = rightArea / rightWinterPlainWidth;\n\n    // We count the full outer side of the summer dykes within the perimeter, even though they're not fully immersed\n    const vp = leftHeight + 2 * leftSummerHeight + 2 * summerBedDepth + 2 * rightSummerHeight + rightHeight;\n    const p = vp + winterPlainsWidth;\n    return Q(a, p);\n  }\n\n  const waterLevels = {\n    // summerBed: 0, // TODO: Currently unused, refactor\n    summerPlains: 0,\n    leftWinterPlain: 0,\n    rightWinterPlain: 0,\n    middleWinterPlain: 0,\n    upperWinterPlains: 0,\n  };\n\n  // Determine which FlowRate area applies to the configured flow rate\n  const currentlyFillingFlowArea = flowAreas.find((f) => f.maxRate > flowRate);\n\n  if (currentlyFillingFlowArea) {\n    if (currentlyFillingFlowArea.type === 'summerBed' || currentlyFillingFlowArea.type === 'summerPlains') {\n      waterLevels.summerPlains = solve(QSummerPlains, flowRate);\n    } else {\n      waterLevels.summerPlains = summerPlainsHeight + summerBedDepth;\n      if (currentlyFillingFlowArea.type === 'lowerWinterPlains') {\n        // Equal dykes\n        const overflowArea = solve(QLowerWinterPlains, flowRate) - summerPlainsArea;\n        const leftWinterPlainWidth = leftWinterDistance - leftSummerDistance;\n        const rightWinterPlainWidth = rightWinterDistance - rightSummerDistance;\n        const maxLeftWinterPlainArea = leftWinterPlainWidth * summerPlainsHeight;\n        const maxRightWinterPlainArea = rightWinterPlainWidth * summerPlainsHeight;\n        let leftWinterPlainArea = overflowArea / 2;\n        let rightWinterPlainArea = overflowArea / 2;\n        if (leftWinterPlainArea > maxLeftWinterPlainArea) {\n          rightWinterPlainArea += leftWinterPlainArea - maxLeftWinterPlainArea;\n          leftWinterPlainArea = maxLeftWinterPlainArea;\n        }\n        if (rightWinterPlainArea > maxRightWinterPlainArea) {\n          leftWinterPlainArea += rightWinterPlainArea - maxLeftWinterPlainArea;\n          leftWinterPlainArea = maxRightWinterPlainArea;\n        }\n\n        waterLevels.leftWinterPlain = leftWinterPlainArea / leftWinterPlainWidth;\n        waterLevels.rightWinterPlain = rightWinterPlainArea / rightWinterPlainWidth;\n      } else if (currentlyFillingFlowArea.type === 'jemoeder') {\n        // FIXME\n      }\n    }\n  } else {\n    // overflow\n  }\n\n  console.log(flowAreas);\n  console.log(waterLevels);\n  function Sky() {\n    return <rect className=\"text-blue-300 fill-current w-full h-full\" />;\n  }\n  function Ground() {\n    return <rect className=\"text-yellow-900 fill-current h-full w-full\" y={_b(summerBedDepth)} />;\n  }\n  function Dyke({ side, distance, height }) {\n    return (\n      <ellipse\n        className=\"text-yellow-800 fill-current\"\n        cx={\n          side === 'left'\n            ? _l(leftWinterHeight + leftWinterDistance - distance - height / 2)\n            : _l(leftWinterHeight + leftWinterDistance + 0.5 + summerBedWidth + 0.5 + distance + height / 2)\n        }\n        // cx={side === 'left' ? l(lwd - distance) : l(lwd + distance + w)}\n        cy={_b(summerBedDepth) + _s(height)}\n        rx={_s(height / 2)}\n        ry={_s(height * 2)}\n      />\n    );\n  }\n\n  function SummerPlains() {\n    return (\n      <rect\n        className=\"text-blue-800 fill-current h-full\"\n        width={_s(summerPlainsWidth + 1 + leftSummerHeight)} // FIXME: Is this correct, or should it be .5lsh + .5rsh?\n        x={_l(leftWinterHeight + leftWinterDistance - leftSummerDistance - leftSummerHeight / 2)}\n        y={_b(waterLevels.summerPlains)}\n      />\n    );\n  }\n\n  function LeftWinterPlain() {\n    return (\n      <rect\n        className=\"text-blue-800 fill-current h-full\"\n        width={_s(leftWinterHeight / 2 + leftWinterDistance - leftSummerDistance - leftSummerHeight / 2)}\n        x={_l(leftWinterHeight / 2)}\n        y={_b(waterLevels.leftWinterPlain + summerBedDepth)}\n      />\n    );\n  }\n\n  function RightWinterPlain() {\n    return (\n      <rect\n        className=\"text-blue-800 fill-current h-full\"\n        width={_s(rightWinterDistance - rightSummerDistance - rightSummerHeight / 2 + rightWinterHeight / 2)}\n        x={_l(\n          leftWinterHeight +\n            leftWinterDistance +\n            0.5 +\n            summerBedWidth +\n            0.5 +\n            rightSummerDistance +\n            rightSummerHeight / 2\n        )}\n        y={_b(waterLevels.rightWinterPlain + summerBedDepth)}\n      />\n    );\n  }\n\n  function SummerBed() {\n    return (\n      <>\n        <mask id=\"flow-area-mask\">\n          <path\n            className=\"text-white h-48 fill-current\"\n            d={`M ${_l(leftWinterHeight + leftWinterDistance)} ${_b(summerBedDepth)}\n        a ${_s(0.5)} ${_s(0.5)} 0 0 1 ${_s(0.5)} ${_s(0.5)}\n        v ${_s(summerBedDepth) - _s(1)}\n        a ${_s(0.5)} ${_s(0.5)} 0 0 0 ${_s(0.5)} ${_s(0.5)}\n        h ${_s(summerBedWidth) - _s(1)}\n        a ${_s(0.5)} ${_s(0.5)} 0 0 0 ${_s(0.5)} -${_s(0.5)}\n        v ${-_s(summerBedDepth) + _s(1)}\n        a ${_s(0.5)} ${_s(0.5)} 0 0 1 ${_s(0.5)} -${_s(0.5)}\n        z`}\n          />\n        </mask>\n        <rect className=\"text-blue-300 fill-current w-full h-full\" mask=\"url(#flow-area-mask)\" />\n        <rect\n          className=\"text-blue-800 fill-current w-full h-full\"\n          mask=\"url(#flow-area-mask)\"\n          y={_b(waterLevels.summerPlains)}\n        />\n      </>\n    );\n  }\n\n  return (\n    <div class=\"flow-model\">\n      <p>Water level: {waterLevels.summerPlains.toFixed(2)}m</p>\n      <p>\n        Flow Area: {flowArea.toFixed(2)}m<sup>2</sup>\n      </p>\n      <p>Wetted permitere: {wettedPerimeter.toFixed(2)}m</p>\n      <svg className=\"w-full\" viewBox=\"0 0 1000 500\">\n        <Sky />\n        <LeftWinterPlain />\n        {/* <MiddleWinterPlain /> */}\n        <SummerPlains />\n        <RightWinterPlain />\n        <Dyke side=\"left\" height={leftWinterHeight} distance={leftWinterDistance} />\n        <Dyke side=\"left\" height={leftSummerHeight} distance={leftSummerDistance} />\n        <Dyke side=\"right\" height={rightSummerHeight} distance={rightSummerDistance} />\n        <Dyke side=\"right\" height={rightWinterHeight} distance={rightWinterDistance} />\n        <Ground />\n        <SummerBed />\n        <line id=\"reference-height\" x1=\"0\" y1=\"950\" x2=\"1000\" y2=\"950\" />\n      </svg>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Input({ label, value, className, type = 'number', step = 0.1 }) {\n  const [val, setVal] = value;\n  const handleChange = (e) => setVal(parseFloat(e.target.value));\n\n  return (\n    <div className={className}>\n      <label className=\"block mt-4 text-xs text-gray-600 whitespace-no-wrap\">{label}</label>\n      <input\n        className=\"bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-md py-2 px-4 text-sm block w-full appearance-none leading-normal\"\n        type={type}\n        value={val}\n        onChange={handleChange}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport Input from './input';\n\nexport default function Sidebar({ state }) {\n  const { q, n, s, sbd, sbw, lwh, lwd, lsh, lsd, rsh, rsd, rwh, rwd } = state;\n  return (\n    <div class=\"sidebar\">\n      <h2 className=\"font-bold text-2xl\">Summer bed</h2>\n      <div className=\"lg:flex\">\n        <Input\n          className=\"w-full mr-8\"\n          label={\n            <>\n              Flow rate in m<sup>3</sup>/s\n            </>\n          }\n          value={q}\n        />\n      </div>\n      <div className=\"lg:flex\">\n        <Input className=\"w-full lg:w-1/2\" label=\"Roughness coefficient (Manning)\" value={n} />\n        <Input className=\"w-full lg:w-1/2\" label=\"Slope decline (m/m)\" value={s} />\n      </div>\n\n      <div className=\"lg:flex\">\n        <Input className=\"w-full lg:w-1/2 mr-8\" label=\"Width of the summer bed in m\" value={sbw} />\n        <Input className=\"w-full lg:w-1/2\" label=\"Depth of the summer bed in m\" value={sbd} />\n      </div>\n      <hr class=\"mt-4\" />\n      <h2 className=\"font-bold text-2xl\">Dykes</h2>\n      <div className=\"lg:flex\">\n        <Input className=\"w-full lg:w-1/2 mr-8\" label=\"Height of left winter dyke\" value={lwh} />\n        <Input className=\"w-full lg:w-1/2\" label=\"Distance of left winter dyke\" value={lwd} />\n      </div>\n      <div className=\"lg:flex\">\n        <Input className=\"w-full lg:w-1/2 mr-8\" label=\"Height of left summer dyke\" value={lsh} />\n        <Input className=\"w-full lg:w-1/2\" label=\"Distance of left summer dyke\" value={lsd} />\n      </div>\n      <div className=\"lg:flex\">\n        <Input className=\"w-full lg:w-1/2 mr-8\" label=\"Height of right summer dyke\" value={rsh} />\n        <Input className=\"w-full lg:w-1/2\" label=\"Distance of right summer dyke\" value={rsd} />\n      </div>\n      <div className=\"lg:flex\">\n        <Input className=\"w-full lg:w-1/2 mr-8\" label=\"Height of right winter dyke\" value={rwh} />\n        <Input className=\"w-full lg:w-1/2\" label=\"Distance of right winter dyke\" value={rwd} />\n      </div>\n      <hr class=\"mt-4\" />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\n\nimport FlowModel from './flow-model';\nimport Sidebar from './sidebar';\nimport './App.css';\n\nfunction App() {\n  const state = {\n    q: useState(750),\n    n: useState(0.035),\n    s: useState(0.1),\n    sbd: useState(3.5),\n    sbw: useState(10),\n    lwh: useState(4),\n    lwd: useState(15),\n    lsh: useState(2.5),\n    lsd: useState(5),\n    rsh: useState(2.5),\n    rsd: useState(5),\n    rwh: useState(4),\n    rwd: useState(15),\n  };\n\n  return (\n    <>\n      <h1 className=\"font-bold text-5xl\">Superflow v0.1</h1>\n      <div className=\"md:flex border-t border-gray-400\">\n        <div className=\"w-full min-w-40 md:w-2/5 xl:w-1/4 px-4 py-8\">\n          <Sidebar state={state} />\n        </div>\n        <div className=\"w-full md:w-3/5 xl:w-3/4 px-4 py-8\">\n          <FlowModel state={state} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}